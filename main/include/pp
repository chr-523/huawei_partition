
class Vertex
{
public:
    Vertex(const std::string &name, const bool &is_reg) : name(name), is_reg(is_reg){}; // constructor

    std::string getName() { return name; };
    bool getisReg() { return is_reg; };

    void pushRegRank(int &temp) { reg_rank = temp; }
    int getRegRank() { return reg_rank; }

    void pushOutDegree(int temp) { outDegree = temp; }
    void pushInDegree(int temp) { inDegree = temp; }
    int getOutDegree() { return outDegree; }
    int getInDegree() { return inDegree; }

    void pushRegTemp(int temp) { reg_temp = temp; }
    int getInRegTemp() { return reg_temp; }

    void pushCombRank(int &temp) { comb_rank = temp; }
    int getCombRank() { return comb_rank; }
    void pushCombRankTemp(int &temp) { comb_rank_temp = temp; }
    int getCombRankTemp() { return comb_rank_temp; }

    void pushWeight(int &temp){weight = temp; }
    int getWeight(){return weight;}


private:
    std::string name;
    int weight = 1; // the weight of vertex
    int outDegree;
    int inDegree;

    bool is_reg;        // whether reg or comb
    int comb_rank;      // the rank of combs between regs
    int comb_rank_temp; // is used to classify combs
    int reg_rank = 0;   // the rank of regs
    int reg_temp;       // is used to classify regs
};

struct Graph
{
    std::unordered_map<std::string, Vertex *> vertexs;
    std::unordered_map<std::string, std::vector<std::pair<std::string, int>>> GraphAdjList_Plus;
    std::unordered_map<std::string, std::vector<std::pair<std::string, int>>> GraphAdjList_Minus;
};

struct GarphData
{
    int *xadj;
    int *vwgt;
    int *adjncy;
    int *adjcwgt;
    std::map<int,std::string> code_endpoints;
    int comb_number = -1;
    int point_number = 0;
    int leng_adj = 0;
};

/*****************************Add to Graph********************************************/

void addPair(std::unordered_map<std::string, std::vector<std::pair<std::string, int>>> &graph,
             const std::string &key, const std::string &neighbor, int value);

#endif